{
"graphql_operation_files": [
{
"operation_name": "AAA__BBB__T",
"api_mount_path": "AAA/BBB/T",
"file_path": "AAA/BBB/T.graphql",
"content": ""
},
{
"operation_name": "ChatGPT__Chat__CreateOneChatMessage",
"api_mount_path": "ChatGPT/Chat/CreateOneChatMessage",
"file_path": "ChatGPT/Chat/CreateOneChatMessage.graphql",
"content": "mutation ChatGPT__Chat__CreateOneChatMessage($title: String = \"\", $updatedAt: DateTime = \"\"){sqlite_createOneUntitled1(data: {title: $title,updatedAt: $updatedAt}){createdAt deletedAt}}"
},
{
"operation_name": "ChatGPT__Chat__CreateOneHistory",
"api_mount_path": "ChatGPT/Chat/CreateOneHistory",
"file_path": "ChatGPT/Chat/CreateOneHistory.graphql",
"content": "mutation ChatGPT__Chat__CreateOneHistory($uuid: BigInt!, $title: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: UnixDate) )@internalOperation {data: grace_createOneHistory(data: {uuid: $uuid,title: $title,updatedAt: $updatedAt}){id uuid title createdAt updatedAt}}"
},
{
"operation_name": "ChatGPT__Chat__DeleteOneChatMessage",
"api_mount_path": "ChatGPT/Chat/DeleteOneChatMessage",
"file_path": "ChatGPT/Chat/DeleteOneChatMessage.graphql",
"content": "mutation ChatGPT__Chat__DeleteOneChatMessage($id: Int!){data: grace_deleteOneChatMessage(where: {id: $id}){id}}"
},
{
"operation_name": "ChatGPT__Chat__DeleteOneHistory",
"api_mount_path": "ChatGPT/Chat/DeleteOneHistory",
"file_path": "ChatGPT/Chat/DeleteOneHistory.graphql",
"content": "mutation ChatGPT__Chat__DeleteOneHistory($id: Int!){data: grace_deleteOneHistory(where: {id: $id}){id}}"
},
{
"operation_name": "ChatGPT__Chat__GetHistoryList",
"api_mount_path": "ChatGPT/Chat/GetHistoryList",
"file_path": "ChatGPT/Chat/GetHistoryList.graphql",
"content": "query ChatGPT__Chat__GetHistoryList($take: Int = 10, $skip: Int = 0, $orderBy: [grace_HistoryOrderByWithRelationInput], $query: grace_HistoryWhereInput)@internalOperation {data: grace_findManyHistory(skip: $skip, take: $take, orderBy: $orderBy, where: {AND: $query}){id uuid title createdAt updatedAt} total: grace_aggregateHistory(where: {AND: $query})@transform(get: \"_count.id\") {_count {id}}}"
},
{
"operation_name": "ChatGPT__Chat__GetManyChatMessage",
"api_mount_path": "ChatGPT/Chat/GetManyChatMessage",
"file_path": "ChatGPT/Chat/GetManyChatMessage.graphql",
"content": ""
},
{
"operation_name": "ChatGPT__Chat__UpdateOneHistory",
"api_mount_path": "ChatGPT/Chat/UpdateOneHistory",
"file_path": "ChatGPT/Chat/UpdateOneHistory.graphql",
"content": "mutation ChatGPT__Chat__UpdateOneHistory($id: Int!, $uuid: BigInt, $title: String, $updatedAt: DateTime! @injectCurrentDateTime(format: UnixDate) ){data: grace_updateOneHistory(data: {uuid: {set: $uuid},title: {set: $title},updatedAt: {set: $updatedAt}}, where: {id: $id}){id uuid title createdAt updatedAt}}"
},
{
"operation_name": "ChatGPT__Propmt__CreateOnePrompt",
"api_mount_path": "ChatGPT/Propmt/CreateOnePrompt",
"file_path": "ChatGPT/Propmt/CreateOnePrompt.graphql",
"content": "mutation ChatGPT__Propmt__CreateOnePrompt($prompt: String!, $title: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: UnixDate) ){data: grace_createOnePrompt(data: {prompt: $prompt,title: $title,updatedAt: $updatedAt}){id prompt title createdAt updatedAt}}"
},
{
"operation_name": "ChatGPT__Propmt__DeleteManyPrompt",
"api_mount_path": "ChatGPT/Propmt/DeleteManyPrompt",
"file_path": "ChatGPT/Propmt/DeleteManyPrompt.graphql",
"content": "mutation ChatGPT__Propmt__DeleteManyPrompt($ids: [Int]!){data: grace_deleteManyPrompt(where: {id: {in: $ids}}){count}}"
},
{
"operation_name": "ChatGPT__Propmt__DeleteOnePrompt",
"api_mount_path": "ChatGPT/Propmt/DeleteOnePrompt",
"file_path": "ChatGPT/Propmt/DeleteOnePrompt.graphql",
"content": "mutation ChatGPT__Propmt__DeleteOnePrompt($id: Int!){data: grace_deleteOnePrompt(where: {id: $id}){id}}"
},
{
"operation_name": "ChatGPT__Propmt__GetPromptList",
"api_mount_path": "ChatGPT/Propmt/GetPromptList",
"file_path": "ChatGPT/Propmt/GetPromptList.graphql",
"content": "query ChatGPT__Propmt__GetPromptList($take: Int = 10, $skip: Int = 0, $orderBy: [grace_PromptOrderByWithRelationInput], $query: grace_PromptWhereInput){data: grace_findManyPrompt(skip: $skip, take: $take, orderBy: $orderBy, where: {AND: $query}){id prompt title createdAt updatedAt} total: grace_aggregatePrompt(where: {AND: $query})@transform(get: \"_count.id\") {_count {id}}}"
},
{
"operation_name": "ChatGPT__Propmt__UpdateOnePrompt",
"api_mount_path": "ChatGPT/Propmt/UpdateOnePrompt",
"file_path": "ChatGPT/Propmt/UpdateOnePrompt.graphql",
"content": "mutation ChatGPT__Propmt__UpdateOnePrompt($id: Int!, $prompt: String, $title: String, $updatedAt: DateTime! @injectCurrentDateTime(format: UnixDate) ){data: grace_updateOnePrompt(data: {prompt: {set: $prompt},title: {set: $title},updatedAt: {set: $updatedAt}}, where: {id: $id}){id prompt title createdAt updatedAt}}"
},
{
"operation_name": "ChatGPT__Subscription__ChatSSE",
"api_mount_path": "ChatGPT/Subscription/ChatSSE",
"file_path": "ChatGPT/Subscription/ChatSSE.graphql",
"content": ""
},
{
"operation_name": "QQ__WW__EE",
"api_mount_path": "QQ/WW/EE",
"file_path": "QQ/WW/EE.graphql",
"content": "mutation QQ__WW__EE($prompt: String = \"\", $title: String = \"\"){grace_createOnePrompt(data: {prompt: $prompt,title: $title}){id}}"
},
{
"operation_name": "Sqlite__Test",
"api_mount_path": "Sqlite/Test",
"file_path": "Sqlite/Test.graphql",
"content": "mutation Sqlite__Test($title: String = \"\", $updatedAt: DateTime!){sqlite_createOneUntitled1(data: {title: $title,updatedAt: $updatedAt}){createdAt deletedAt updatedAt id title}}"
},
{
"operation_name": "Sub__Test",
"api_mount_path": "Sub/Test",
"file_path": "Sub/Test.graphql.off",
"content": ""
},
{
"operation_name": "System__BindRoleApis",
"api_mount_path": "System/BindRoleApis",
"file_path": "System/BindRoleApis.graphql",
"content": "mutation System__BindRoleApis($allRoles: [String]!, $apis: [Int]!, $roleCode: String!){data: system_bindRoleApis(POSTApiV1RoleBindApiInput: {roleCode: $roleCode,apis: $apis,allRoles: $allRoles}){count}}"
},
{
"operation_name": "System__GetRoleBindApis",
"api_mount_path": "System/GetRoleBindApis",
"file_path": "System/GetRoleBindApis.graphql",
"content": "query System__GetRoleBindApis($code: String!){data: system_getRoleBindApis(code: $code){content createTime deleteTime enabled id illegal isPublic liveQuery method operationType remark restUrl roleType roles title updateTime}}"
},
{
"operation_name": "T",
"api_mount_path": "T",
"file_path": "T.graphql.off",
"content": ""
}
],
"typescript_operation_files": null,
"invalid": [
"AAA__BBB__T",
"ChatGPT__Chat__GetManyChatMessage",
"ChatGPT__Subscription__ChatSSE",
"Sub__Test",
"T"
],
"questions": [
{
"model": 2,
"name": "AAA/BBB/T",
"msg": "error normalizing operation: external: field: my_findUniquequestion not defined on type: Query, locations: [], path: [query,my_findUniquequestion], operationFilePath: AAA/BBB/T.graphql"
},
{
"model": 2,
"name": "ChatGPT/Chat/GetManyChatMessage",
"msg": "error normalizing operation: external: field: haha not defined on type: chatGPT_Person, locations: [], path: [query,chatGPT_person,haha], operationFilePath: ChatGPT/Chat/GetManyChatMessage.graphql"
},
{
"model": 2,
"name": "ChatGPT/Subscription/ChatSSE",
"msg": "error normalizing operation: external: Unknown type \"\"., locations: [], path: [subscription], operationFilePath: ChatGPT/Subscription/ChatSSE.graphql"
},
{
"model": 2,
"name": "Sub/Test",
"msg": "error normalizing operation: external: Unknown type \"\"., locations: [], path: [subscription], operationFilePath: Sub/Test.graphql.off"
},
{
"model": 2,
"name": "T",
"msg": "graphql document must contain exactly one operation: T.graphql.off"
}
]
}